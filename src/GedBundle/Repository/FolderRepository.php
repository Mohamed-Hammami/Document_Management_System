<?php

namespace GedBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Gedmo\Tree\Entity\Repository\NestedTreeRepository;
/**
 * FolderRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FolderRepository extends NestedTreeRepository
{
    public function findFiles($id)
    {
        $qb = $this->createQueryBuilder('fo')
            ->where('fo.id = :id')
            ->leftJoin('fo.files', 'fi')
            ->addSelect('fi')
            ->setParameter('id', $id)
        ;

        return $qb->getQuery()
                ->getResult();
    }

    public function findFolderUser($id)
    {
        $qb = $this->createQueryBuilder('fo')
            ->where('fo.id = :id')
            ->leftJoin('fo.createdBy', 'crt')
            ->leftJoin('fo.updatedBy', 'upd')
            ->addSelect('crt')
            ->addSelect('upd')
            ->setParameter('id', $id)
        ;

        return $qb->getQuery()
                    ->getArrayResult();
    }

    public function findFolderChildrenUser($id)
    {
        $qb = $this->createQueryBuilder('fo')
            ->leftJoin('fo.parent', 'pa')
            ->leftJoin('fo.createdBy', 'crt')
            ->leftJoin('fo.updatedBy', 'upd')
            ->where('pa.id = :id')
            ->addSelect('crt')
            ->addSelect('upd')
            ->setParameter('id', $id)
        ;

        return $qb->getQuery()
                ->getArrayResult();

    }

    public function findFolderByFile($id)
    {
        $qb = $this->createQueryBuilder('fo')
            ->leftJoin('fo.files', 'fi')
            ->where('fi.id = :id')
            ->setParameter('id', $id);

        return $qb->getQuery()
            ->getOneOrNullResult();
    }

    public function findFolder($id)
    {
        $qb = $this->createQueryBuilder('f')
            ->setParameter('id', $id)
            ->where('f.id = :id')
            ->select('f.id')
            ->addSelect('f.name');


        return $qb->getQuery()
            ->getResult();
    }

    public function findWorkspaceFolder($wk, $fo)
    {
        $qb = $this->createQueryBuilder('fo')
            ->from('GedBundle:WorkspaceFolder', 'wf')
            ->Join('wf.folder', 'foo')
            ->leftJoin('fo.parent', 'pa')
            ->where('pa.id = :id')
            ->andWhere('foo.id = fo.id')
            ->andWhere('wf.workspace = :wk')
            ->select('fo.id')
            ->setParameter('id', $fo)
            ->setParameter('wk', $wk)
        ;

        $result =  $qb->getQuery()->getResult();
        $folderIds = array();
        foreach( $result as $id )
        {
            array_push($folderIds, $id['id']);
        }

        return $folderIds;

    }

    public function searchFolderByUser($user)
    {
        $qb = $this->createQueryBuilder('f')
            ->leftJoin('f.createdBy', 'cr')
            ->leftJoin('f.updatedBy', 'up')
            ->setParameter('term', '%'.$user.'%')
            ->where('cr.username LIKE :term')
            ->orWhere('up.username LIKE :term')
            ->distinct('f.id');

        return $qb->getQuery()->getResult();
    }

    public function searchByName($name)
    {
        $qb = $this->createQueryBuilder('f')
                    ->setParameter('term', '%'.$name.'%')
                    ->where('f.name LIKE :term')
                    ->leftJoin('f.createdBy', 'crt')
                    ->leftJoin('f.updatedBy', 'upd')
                    ->addSelect('crt')
                    ->addSelect('upd');

        return $qb->getQuery()->getResult();
    }

    public function findOnHold()
    {
        $qb = $this->createQueryBuilder('f')
            ->where('f.onHold = true');

        return $qb->getQuery()->getResult();
    }
}
